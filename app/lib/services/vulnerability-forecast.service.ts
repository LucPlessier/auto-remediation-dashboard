import { BaseService } from './base.service'

export interface VulnerabilityForecast {
  month: string
  predicted_vulnerabilities: number
  confidence_score: number
  risk_level: 'low' | 'medium' | 'high' | 'critical'
  contributing_factors: {
    factor: string
    weight: number
  }[]
}

export class VulnerabilityForecastService extends BaseService {
  async getForecastData() {
    try {
      const data = await this.liquidModel.getVulnerabilityForecast()
      return this.transformForecastData(data)
    } catch (error) {
      this.handleError(error)
    }
  }

  async getDetailedForecast(month: string) {
    try {
      const data = await this.liquidModel.getDetailedVulnerabilityForecast(month)
      return this.transformDetailedForecast(data)
    } catch (error) {
      this.handleError(error)
    }
  }

  private transformForecastData(data: any[]): VulnerabilityForecast[] {
    return data.map(forecast => ({
      month: forecast.month,
      predicted_vulnerabilities: forecast.predicted_count,
      confidence_score: forecast.confidence_score,
      risk_level: forecast.risk_level.toLowerCase(),
      contributing_factors: forecast.contributing_factors.map((factor: any) => ({
        factor: factor.name,
        weight: factor.impact_weight
      }))
    }))
  }

  private transformDetailedForecast(data: any) {
    return {
      ...this.transformForecastData([data])[0],
      details: {
        methodology: data.prediction_methodology,
        historical_data: data.historical_data,
        confidence_interval: {
          lower: data.confidence_interval.lower,
          upper: data.confidence_interval.upper
        },
        trend_analysis: data.trend_analysis,
        recommendations: data.recommendations
      }
    }
  }
}
