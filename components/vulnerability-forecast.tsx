"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Brain } from 'lucide-react'
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from "recharts"
import { useEffect, useState } from "react"
import { VulnerabilityForecastService, VulnerabilityForecast as VulnerabilityForecastType } from "@/lib/services/vulnerability-forecast.service"

interface ChartData {
  name: string
  total: number
}

export function VulnerabilityForecastChart() {
  const [data, setData] = useState<ChartData[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const forecastService = new VulnerabilityForecastService()

  useEffect(() => {
    async function fetchForecastData() {
      try {
        const forecastData = await forecastService.getForecastData()
        if (!forecastData) {
          throw new Error("No forecast data received")
        }
        const transformedData: ChartData[] = forecastData.map((item: VulnerabilityForecastType) => ({
          name: item.month,
          total: item.predicted_vulnerabilities
        }))
        setData(transformedData)
      } catch (error) {
        console.error("Error fetching forecast data:", error)
        // Fallback to sample data if the service fails
        setData(getSampleData())
      } finally {
        setIsLoading(false)
      }
    }

    fetchForecastData()
  }, [])

  return (
    <Card className="col-span-1">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-4 w-4 text-green-600" />
          CVE Forecasting
        </CardTitle>
      </CardHeader>
      <CardContent className="pl-2">
        <ResponsiveContainer width="100%" height={350}>
          <BarChart data={isLoading ? getSampleData() : data}>
            <XAxis 
              dataKey="name" 
              stroke="#888888" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false} 
            />
            <YAxis 
              stroke="#888888" 
              fontSize={12} 
              tickLine={false} 
              axisLine={false} 
              tickFormatter={(value) => `${value}`} 
            />
            <Bar 
              dataKey="total" 
              fill="#22c55e" 
              radius={[4, 4, 0, 0]} 
              opacity={isLoading ? 0.5 : 1}
            />
          </BarChart>
        </ResponsiveContainer>
      </CardContent>
    </Card>
  )
}

// Fallback sample data
function getSampleData(): ChartData[] {
  return [
    { name: "Jan", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Feb", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Mar", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Apr", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "May", total: Math.floor(Math.random() * 5000) + 1000 },
    { name: "Jun", total: Math.floor(Math.random() * 5000) + 1000 },
  ]
}